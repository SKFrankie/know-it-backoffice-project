import { typeDefs } from './graphql-schema'
import { ApolloServer } from 'apollo-server-express'
import express from 'express'
import neo4j from 'neo4j-driver'
import { Neo4jGraphQL } from '@neo4j/graphql'
import dotenv from 'dotenv'
import resolvers from './resolvers'
import { corsOptions } from './constants'
import cors from 'cors'

// set environment variables from .env
dotenv.config()

const app = express()
app.use(function (req, res, next) {
  res.header('Access-Control-Allow-Origin', process.env.KNOW_IT_URL) // update to match the domain you will make the request from
  res.header(
    'Access-Control-Allow-Headers',
    'Origin, X-Requested-With, Content-Type, Accept'
  )
  next()
})

/*
 * Create a Neo4j driver instance to connect to the database
 * using credentials specified as environment variables
 * with fallback to defaults
 */
const driver = neo4j.driver(
  process.env.NEO4J_URI || 'bolt://localhost:7687',
  neo4j.auth.basic(
    process.env.NEO4J_USER || 'neo4j',
    process.env.NEO4J_PASSWORD || 'neo4j'
  )
)

/*
 * Create an executable GraphQL schema object from GraphQL type definitions
 * including autogenerated queries and mutations.
 * Read more in the docs:
 * https://neo4j.com/docs/graphql-manual/current/
 */

const neoSchema = new Neo4jGraphQL({
  typeDefs,
  driver,
  resolvers,
  config: {
    jwt: {
      secret: process.env.JWT_SECRET || 'secret',
    },
    database: process.env.NEO4J_DATABASE || 'neo4j',
  },
})
neoSchema
  .assertIndexesAndConstraints({ options: { create: true } })
  .then(() => {
    const server = new ApolloServer({
      cors: cors(corsOptions),
      context: ({ req }) => ({
        req,
        driver,
        driverConfig: { database: process.env.NEO4J_DATABASE || 'neo4j' },
      }),
      schema: neoSchema.schema,
      introspection: true,
      playground: true,
    })

    const port = process.env.GRAPHQL_SERVER_PORT || 4001
    const path = process.env.GRAPHQL_SERVER_PATH || '/graphql'
    const host = process.env.GRAPHQL_SERVER_HOST || '0.0.0.0'

    server.applyMiddleware({ app, cors: corsOptions, path })

    app.listen({ host, port, path }, () => {
      console.log(`GraphQL server ready at http://${host}:${port}${path}`)
    })
  })
