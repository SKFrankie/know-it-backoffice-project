enum Rate {
  THUMBS_UP
  THUMBS_DOWN
}

enum Right {
  ADMIN # Can do everything
  EDITOR # Can edit content
  READER # Can read content
}

type AuthToken {
  token: String!
}

## Users

# Regular users (players)
type User {
  userId: ID!
  username: String!
  mail: String!
  password: String! @private
  coins: Int!
  tickets: Int!
  # invetory: [Avatar!]!
  # scores: [score]
  # currentAvatar: Avatar!
  stars: Int!
  daysInArow: Int!
  isPremium: Boolean!
  age: Int!
  country: String!
  actualMoneySpent: Int
  appRate: Rate
  appReview: String
  lastPremiumDate: DateTime
  lastSeen: DateTime!
  createdAt: DateTime!
}

# Admin users, who can add/remove/manage content
type SuperUser {
  userId: ID!
  mail: String!
  password: String @private
  firstname: String
  lastname: String
  rights: Right!

  createdAt: DateTime!
}

## Avatars

type Avatar
  @auth(
    rules: [
      {
        operations: [CREATE, UPDATE, DELETE, CONNECT, DISCONNECT]
        isAuthenticated: true
        roles: [ADMIN, EDITOR]
      }
      { operations: [READ], isAuthenticated: true }
    ]
  ) {
  avatarId: ID! @id
  name: String! @unique
  picture: String!
  coinPrice: Int!
  collections: [AvatarCollection]
    @relationship(type: "AVATAR_COLLECTION_AVATAR", direction: IN)
}

type AvatarCollection {
  avatarCollectionId: ID! @id
  name: String! @unique
  startDate: DateTime
  endDate: DateTime
  avatars: [Avatar]!
    @relationship(type: "AVATAR_COLLECTION_AVATAR", direction: OUT)
}

type Mutation {
  # regular users
  signup(mail: String!, username: String!, password: String!): AuthToken
  login(mail: String!, password: String!): AuthToken

  # super users
  forbiddenSuperSignup(
    mail: String!
    firstname: String
    lastname: String
    password: String!
    rights: Right
  ): AuthToken

  superSignup(
    token: String!
    firstname: String
    lastname: String
    password: String!
  ): AuthToken

  superLogin(mail: String!, password: String!): AuthToken

  # returns authentication url
  inviteSuperUser(mail: String!, rights: Right!): String

  ##avatars add avatar to collection##
  #   addAvatarToCollection(
  #     avatarId: ID!
  #     avatarCollectionId: ID!
  #   ): AvatarCollection
  #   {
  #   updateAvatars(
  #     where: { avatarId: $avatarId }
  #     update: {
  #       collections: {
  #         connect: {
  #           where: {
  #             node: { avatarCollectionId: "9c4fadea-d701-478a-8f23-c137438b7ff4" }
  #           }
  #         }
  #       }
  #     }
  #   ) {
  #     avatars {
  #       name
  #       collections {
  #         name
  #       }
  #     }
  #   }
  # }
}

type Query {
  # regular users
  currentUser: User
    @cypher(
      statement: """
      MATCH (u:User {userId: $auth.jwt.userId})
      RETURN u
      """
    )

  # super users
  superCurrentUser: SuperUser
    @cypher(
      statement: """
      MATCH (u:SuperUser {userId: $auth.jwt.userId})
      RETURN u
      """
    )
}
