enum Rate {
  THUMBS_UP
  THUMBS_DOWN
}

enum Right {
  ADMIN # Can do everything
  EDITOR # Can edit content
  READER # Can read content
}

enum GameName {
  SYNONYM_ROLL
  FAB_VOCAB
  ANTONYM_HUNT
  GRAMMAR_GEEK
  KNOWLYMPICS
}

enum RewardType {
  COINS
  STARS
  STAR_PERCENTAGE
}

type AuthToken {
  token: String!
}

## Users

# Regular users (players)
type User
  @auth(
    rules: [
      {
        operations: [UPDATE, DELETE, CONNECT, DISCONNECT]
        isAuthenticated: true
        roles: [ADMIN]
      }
      {
        operations: [READ]
        isAuthenticated: true
        roles: [ADMIN, READER, EDITOR]
      }
    ]
  ) {
  userId: ID!
  username: String!
  mail: String! @unique
  password: String @private
  coins: Int! @default(value: 0)
  stars: Int! @default(value: 0)
  inventory: [Avatar] @relationship(type: "AVATARS_USER", direction: IN)
  scores: [Score] @relationship(type: "SCORE_USER", direction: OUT)
  currentAvatar: Avatar @relationship(type: "AVATAR_USER", direction: IN)

  starPerecentage: Int! @default(value: 0)
  daysInArow: Int
  isPremium: Boolean! @default(value: false)
  age: Int
  country: String
  actualMoneySpent: Int
  appRate: Rate
  appReview: String
  lastPremiumDate: DateTime
  lastSeen: DateTime
  createdAt: DateTime!
}

# Admin users, who can add/remove/manage content
type SuperUser
  @auth(
    rules: [
      {
        operations: [CREATE, UPDATE, DELETE, CONNECT, DISCONNECT]
        isAuthenticated: true
        roles: [ADMIN]
      }
      {
        operations: [READ]
        isAuthenticated: true
        roles: [ADMIN, READER, EDITOR]
      }
    ]
  ) {
  userId: ID!
  mail: String! @unique
  password: String @private
  firstname: String
  lastname: String
  rights: Right

  createdAt: DateTime
}

## Avatars

type Avatar
  @auth(
    rules: [
      {
        operations: [CREATE, UPDATE, DELETE, CONNECT, DISCONNECT]
        isAuthenticated: true
        roles: [ADMIN, EDITOR]
      }
      { operations: [READ], isAuthenticated: true }
    ]
  ) {
  avatarId: ID! @id
  name: String! @unique
  picture: String!
  coinPrice: Int!
  collections: [AvatarCollection]
    @relationship(type: "AVATAR_COLLECTION_AVATAR", direction: OUT)
  ownedBy: [User] @relationship(type: "AVATARS_USER", direction: OUT)
}

type AvatarCollection
  @auth(
    rules: [
      {
        operations: [CREATE, UPDATE, DELETE, CONNECT, DISCONNECT]
        isAuthenticated: true
        roles: [ADMIN, EDITOR]
      }
      { operations: [READ], isAuthenticated: true }
    ]
  ) {
  avatarCollectionId: ID! @id
  name: String! @unique
  startDate: DateTime
  endDate: DateTime
  avatars: [Avatar]!
    @relationship(type: "AVATAR_COLLECTION_AVATAR", direction: IN)
}

## Games

type Game
  @auth(
    rules: [
      {
        operations: [CREATE, UPDATE, DELETE, CONNECT, DISCONNECT]
        isAuthenticated: true
        roles: [ADMIN, EDITOR]
      }
    ]
  ) {
  gameId: ID! @id
  name: GameName! @unique
  description: String
  scores: [Score] @relationship(type: "SCORE_GAME", direction: IN)
  timer: Int!
}

type Score
  @auth(
    rules: [
      {
        operations: [READ, CREATE, UPDATE, DELETE, CONNECT, DISCONNECT]
        isAuthenticated: true
      }
    ]
  ) {
  scoreId: ID! @id
  user: User! @relationship(type: "SCORE_USER", direction: IN)
  game: Game! @relationship(type: "SCORE_GAME", direction: OUT)
  score: Int!
  createdAt: DateTime!
}

type SynonymRollList
  @auth(
    rules: [
      {
        operations: [CREATE, UPDATE, DELETE, CONNECT, DISCONNECT]
        isAuthenticated: true
        roles: [ADMIN, EDITOR]
      }
    ]
  ) {
  synonymId: ID! @id
  synonyms: [String!]!
}

type FabVocabQuestion
  @auth(
    rules: [
      {
        operations: [CREATE, UPDATE, DELETE, CONNECT, DISCONNECT]
        isAuthenticated: true
        roles: [ADMIN, EDITOR]
      }
    ]
  ) {
  fabvocabId: ID! @id
  picture: String!
  correctWords: [String!]!
  wrongWords: [String!]!
  correctSentence: String!
  wrongSentences: [String!]!
}

type AntonymHuntAssociation
  @auth(
    rules: [
      {
        operations: [CREATE, UPDATE, DELETE, CONNECT, DISCONNECT]
        isAuthenticated: true
        roles: [ADMIN, EDITOR]
      }
    ]
  ) {
  antonymId: ID! @id
  rightWord: String!
  leftWord: String!
}

type GrammarGeekQuestion
  @auth(
    rules: [
      {
        operations: [CREATE, UPDATE, DELETE, CONNECT, DISCONNECT]
        isAuthenticated: true
        roles: [ADMIN, EDITOR]
      }
    ]
  ) {
  grammarId: ID! @id
  sentence: String!
  correctWord: String!
  wrongWords: [String!]!
  hint: String
}

## Gifts

type Gift
  @auth(
    rules: [
      {
        operations: [CREATE, UPDATE, DELETE, CONNECT, DISCONNECT]
        isAuthenticated: true
        roles: [ADMIN, EDITOR]
      }
    ]
  ) {
  giftId: ID! @id
  day: Int! @unique
  quantity: Int!
  reward: RewardType!
}

type Mutation {
  # regular users
  signup(mail: String!, username: String!, password: String!): AuthToken
  login(mail: String!, password: String!): AuthToken

  googleSignup(token: String): AuthToken
  googleLogin(token: String): AuthToken

  # super users
  forbiddenSuperSignup(
    mail: String!
    firstname: String
    lastname: String
    password: String!
    rights: Right
  ): AuthToken

  superSignup(
    token: String!
    firstname: String
    lastname: String
    password: String!
  ): AuthToken

  superLogin(mail: String!, password: String!): AuthToken

  # returns authentication url
  inviteSuperUser(mail: String!, rights: Right!): String

  ##avatars add avatar to collection##
  addAvatarToCollection(
    avatarId: ID!
    avatarCollectionId: ID!
  ): AvatarCollection
    @cypher(
      statement: """
      MATCH (avatar:Avatar {avatarId: $avatarId})
      MATCH (collection:AvatarCollection {avatarCollectionId: $avatarCollectionId})
      MERGE (avatar)-[r:AVATAR_COLLECTION_AVATAR]->(collection)
      RETURN collection
      """
    )

  addAvatarsToCollection(
    avatarIds: [ID!]!
    avatarCollectionId: ID!
  ): AvatarCollection
    @cypher(
      statement: """
      MATCH (avatar:Avatar) WHERE avatar.avatarId IN $avatarIds
      MATCH (collection:AvatarCollection {avatarCollectionId: $avatarCollectionId})
      MERGE (avatar)-[r:AVATAR_COLLECTION_AVATAR]->(collection)
      RETURN collection
      """
    )

  toggleAvatarsToCollection(
    avatarIds: [ID!]!
    avatarCollectionId: ID!
  ): AvatarCollection
    @cypher(
      statement: """
      MATCH (avatar:Avatar) WHERE avatar.avatarId IN $avatarIds
      MATCH (collection:AvatarCollection {avatarCollectionId: $avatarCollectionId})
      OPTIONAL MATCH (avatar)-[oldR:AVATAR_COLLECTION_AVATAR]->(collection)
      MERGE (avatar)-[r:AVATAR_COLLECTION_AVATAR]->(collection)
      DELETE oldR
      WITH collection
      RETURN collection
      """
    )

  ## Games

  addNewScore(gameName: GameName!, score: Int!): Score
    @cypher(
      statement: """
      MATCH (game:Game {name: $gameName})
      MATCH (user:User {userId: $auth.jwt.userId})
      MERGE (user)-[r:SCORE_USER]->(s:Score {score: $score})-[r2:SCORE_GAME]->(game)
      RETURN s
      """
    )
  updateScore(gameName: GameName!, score: Int!): Score
    @cypher(
      statement: """
      MATCH (game:Game {name: $gameName})
      MATCH (user:User {userId: $auth.jwt.userId})
      MATCH (user)-[r:SCORE_USER]->(s:Score)-[r2:SCORE_GAME]->(game)
      set s.score = $score
      RETURN s
      """
    )
}

type Query {
  # regular users
  currentUser: User
    @cypher(
      statement: """
      MATCH (u:User {userId: $auth.jwt.userId})
      RETURN u
      """
    )

  # super users
  superCurrentUser: SuperUser
    @cypher(
      statement: """
      MATCH (u:SuperUser {userId: $auth.jwt.userId})
      RETURN u
      """
    )
}
